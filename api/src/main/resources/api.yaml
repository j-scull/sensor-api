openapi: 3.0.0
info:
  version: 1.0.0
  title: Temperature and Humidity
  license:
    name: MIT
servers:
  - url: http://sensor-api/v1
paths:
  /data:    # Todo - update to use apiKey
    post:
      summary: Log temperature and humidity data.
      operationId: logData
#      security:
#        - api_key: []
      tags:
        - logData
      requestBody:
        description: Request body containing sensorId with recorded temperature and humidity.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
      responses:
        201:
          description: Null response.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#  /data/{sensorId}:
#    get:
#      summary: Get all logged data for a specified sensorId over the last 24 hour period.
#      operationId: getData
#      #      security:
#      #        - api_key: []
#      tags:
#        - getData
#      parameters:
#        - name: sensorId
#          in: path
#          description: Get data logged by this sensor.
#          required: true
#          schema:
#            type: string
#      responses:
#        200:
#          description: An array of data logged by a sensor.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/GetDataResponseArray"
#        default:
#          description: Unexpected error.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Error"

  /data/{sensorId}/date:
    post:
      summary: Get all logged data for a specified sensorId and date.
      operationId: getDataForDate
#      security:
#        - api_key: []
      tags:
        - getDataForDate
      parameters:
        - name: sensorId
          in: path
          description: Get data logged by this sensor.
          required: true
          schema:
            type: string
      requestBody:
        description: Request body specifying a date/time
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dateTime:
                  type: string
                  format: date-time
              required:
                - dateTime
      responses:
        200:
          description: An array of data logged by a sensor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataResponseArray"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
  /data/{sensorId}/date/range:
    post:
      summary: Get all logged data for a specified sensorId within a specified time range.
      operationId: getDataForDateRange
#      security:
#        - api_key: []
      tags:
        - getDataForDateRange
      parameters:
        - name: sensorId
          in: path
          description: Get data logged by this sensor.
          required: true
          schema:
            type: string
      requestBody:
        description: Request body specifying a from -> until date/time range
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                from:
                  type: string
                  format: date-time
                until:
                  type: string
                  format: date-time
              required:
                - from
                - until
      responses:
        200:
          description: An array of data logged by a sensor.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDataResponseArray"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#  /data/{sensorId}/count:
#    get:
#      summary: Get the total count of all logged data for a specified sensorId.
#      operationId: getCount
#      #      security:
#      #        - api_key: []
#      tags:
#        - getCount
#      parameters:
#        - name: sensorId
#          in: path
#          description: Get the total count of data logged by this sensor.
#          required: true
#          schema:
#            type: string
#      responses:
#        200:
#          description: The total count of data logged
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  count:
#                    type: number
#        default:
#          description: Unexpected error.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Error"
                
  /sensors:
    get:
      summary: List all sensors.
      operationId: listSensors
#      security:
#        - api_key: []
      tags:
        - listSensors
      responses:
        200:
          description: Expected response to a valid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSensorsResponse"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sensors/create:
    post:
      summary: Register a new sensor.
      operationId: createSensor
      #      security:
      #        - api_key: []
      tags:
        - addSensor
      requestBody:
        description: Request body containing new sensorId and location.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSensorRequest'

      responses:
        201:
          description: Null response.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sensor/{sensorId}:
    get:
      summary: Get info on specified sensor.
      operationId: getSensor
      #      security:
      #        - api_key: []
      tags:
        - getSensor
      parameters:
        - name: sensorId
          in: path
          description: Get info on this sensor.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSensorResponse"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

#  /sensors/{sensorId}/update:
#    post:
#      summary: Update an existing sensor.
#      operationId: updateSensor
#      #      security:
#      #        - api_key: []
#      tags:
#        - updateSensor
#      parameters:
#        - name: sensorId
#          in: path
#          description: Get info on this sensor.
#          required: true
#          schema:
#            type: string
#      requestBody:
#        description: Request body containing new sensorId and location info.
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/CreateSensorRequest'
#      responses:
#        201:
#          description: Null response.
#        default:
#          description: Unexpected error.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Error"
#
#  /sensor/{sensorId}/delete:
#    get:
#      summary: Delete a registered sensor and all associated data.
#      operationId: deleteSensor
#      #      security:
#      #        - api_key: []
#      tags:
#        - deleteSensor
#      parameters:
#        - name: sensorId
#          in: path
#          description: Delete data for this sensor.
#          required: true
#          schema:
#            type: string
#      responses:
#        201:
#          description: Null response.
#        default:
#          description: Unexpected error.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Error"
      
    
components:
  schemas:
    UpdateRequest:
      type: object
      required:
        - sensorId
        - temperature
        - humidity
      properties:
        sensorId:
          type: string
        temperature:
          type: integer
          format: int32
        humidity:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
    GetDataResponse:
      type: object
      required:
        - temperature
        - humidity
        - dateTime
      properties:
        temperature:
          type: integer
          format: int32
        humidity:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
        dateTime:
          type: string
    GetDataResponseArray:
      type: array
      items:
        $ref: "#/components/schemas/GetDataResponse"
    GetSensorResponse:
      type: object
      required:
        - sensorId
        - location
        - startDate
      properties:
        sensorId:
          type: string
        location:
          type: string
        startDate:
          type: string
          format: date-time
    ListSensorsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetSensorResponse'
    CreateSensorRequest:
      type: object
      required:
        - sensorId
        - location
      properties:
        sensorId:
          type: string
        location:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
#  securitySchemes:
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header   # or query