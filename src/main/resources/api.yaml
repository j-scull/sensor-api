openapi: 3.0.0
info:
  version: 1.0.0
  title: Temperature and Humidity
  license:
    name: MIT
servers:
  - url: http://sensor-api/v1
paths:
  /logData:    # Todo - update to use apiKey
    post:
      summary: Log temperature and humidity data.
      operationId: logData
#      security:
#        - api_key: []
      tags:
        - logData
      requestBody:
        description: Request body containing sensorId with recorded temperature and humidity.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataRequest'
      responses:
        201:
          description: Null response.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /getData/{sensorId}:
    get:
      summary: Get all logged data for a specified sensorId and date.
      operationId: getData
#      security:
#        - api_key: []
      tags:
        - getData
      parameters:
        - name: sensorId
          in: path
          description: Get data logged by this sensor.
          required: true
          schema:
            type: string
        - name: year
          in: query
          description: Get data for this year.
          required: true
          schema:
            type: string
        - name: month
          in: query
          description: Get data for this month.
          required: true
          schema:
            type: string
        - name: date
          in: query
          description: Get data for this date of month.
          required: true
          schema:
            type: string
        - name: hour
          in: query
          description: Get data for this hour, 24 hour format.
          required: false
          schema:
            type: string
      responses:
        200:
          description: An array of dataPoints.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataResponseArray"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
  /getData/{sensorId}/range:
    get:
      summary: Get all logged data for a specified sensorId within a specified time range.
      operationId: getDataRange
#      security:
#        - api_key: []
      tags:
        - getDataRange
      parameters:
        - name: sensorId
          in: path
          description: Get data logged by this sensor.
          required: true
          schema:
            type: string
        - name: fromYear
          in: query
          description: Get data from this year.
          required: true
          schema:
            type: string
        - name: fromMonth
          in: query
          description: Get data from this month.
          required: true
          schema:
            type: string
        - name: fromDate
          in: query
          description: Get data from this date of month.
          required: true
          schema:
            type: string
        - name: fromHour
          in: query
          description: Get data from this hour, 24 hour format.
          required: false
          schema:
            type: string
        - name: untilYear
          in: query
          description: Get data until this year.
          required: true
          schema:
            type: string
        - name: untilMonth
          in: query
          description: Get data until this month.
          required: true
          schema:
            type: string
        - name: untilDate
          in: query
          description: Get data until this date of month.
          required: true
          schema:
            type: string
        - name: untilHour
          in: query
          description: Get data until this hour, 24 hour format.
          required: false
          schema:
            type: string
      responses:
        201:
          description: Expected response to a valid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataResponseArray"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                
  /sensors:
    get:
      summary: List all sensors.
      operationId: listSensors
#      security:
#        - api_key: []
      tags:
        - listSensors
      responses:
        200:
          description: Expected response to a valid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSensorsResponse"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sensor/{sensorId}:
    get:
      summary: Get info on specified sensor.
      operationId: getSensor
      #      security:
      #        - api_key: []
      tags:
        - getSensor
      parameters:
        - name: sensorId
          in: path
          description: Get info on this sensor.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSensorResponse"
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /sensors/add:
    post:
      summary: Register a new sensor.
      operationId: addSensor
      #      security:
      #        - api_key: []
      tags:
        - addSensor
      requestBody:
        description: Request body containing new sensorId and location.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSensorRequest'

      responses:
        201:
          description: Null response.
        default:
          description: Unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
    
components:
  schemas:
    DataRequest:
      type: object
      required:
        - sensorId
        - temperature
        - humidity
      properties:
        sensorId:
          type: string
        temperature:
          type: integer
          format: int32
        humidity:
          type: integer
          format: int32
    DataResponse:
      type: object
      required:
        - temperature
        - humidity
        - dateTime
      properties:
        temperature:
          type: integer
          format: int32
        humidity:
          type: integer
          format: int32
        dateTime:
          type: string
    DataResponseArray:
      type: array
      items:
        $ref: "#/components/schemas/DataResponse"
    GetSensorResponse:
      type: object
      required:
        - sensorId
        - location
        - startDate
      properties:
        sensorId:
          type: string
        location:
          type: string
        startDate:
          type: string
    ListSensorsResponse:
      type: array
      items:
        $ref: '#/components/schemas/GetSensorResponse'
    AddSensorRequest:
      type: object
      required:
        - sensorId
        - location
      properties:
        sensorId:
          type: string
        location:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
#  securitySchemes:
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header   # or query